<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 2018/6/9
 * Time: 上午7:52
 */
namespace Weixin\Controller;

use Common\Controller\BaseController;
use Com\Wechat;
use Com\WechatAuth;

class IndexController extends BaseController{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $config = S(SERVER.'config');
        if(empty($config)){
            $data = M('config')->select();
            foreach ($data as $v) {
                $config[$v['setname']][$v['setkey']] = $v['setvalue'];
            }
            S(SERVER.'config',$config);
        }
        $this->wconfig = $config['weixin'];

    }

    /**
     * [valid 首次绑定验证token]
     * @method   valid
     * @Author   wangcongcong
     * @DateTime 2016-11-03T16:14:23+0800
     * @return   [type]                          [description]
     */
    public function valid(){
        $echoStr=$_GET['echostr'];

        $signature=$_GET['signature'];
        $timestamp=$_GET['timestamp'];
        $nonce=$_GET['nonce'];

        $tmpArr=array($this->wconfig['token'],$timestamp,$nonce);
        sort($tmpArr);
        $tmpStr=implode($tmpArr);
        $tmpStr=sha1($tmpStr);

        if($tmpStr==$signature){
            echo $echoStr;
            exit;
        }
        else
        {
            return false;
        }
    }
    /**
     * 微信消息接口入口
     * 所有发送到微信的消息都会推送到该操作
     * 所以，微信公众平台后台填写的api地址则为该操作的访问地址
     */
    public function index($id = ''){
        if(isset($_GET['echostr']))
        {
            $this->valid();
        }
        else
        {
            //调试
            try{
                /* 加载微信SDK */
                $this->wechat = new Wechat($this->wconfig['token'], $this->wconfig['appid'], $this->wconfig['encodingaeskey']);

                /* 获取请求信息 */
                $data = $this->wechat->request();

                if($data && is_array($data)){
                    /**
                     * 你可以在这里分析数据，决定要返回给用户什么样的信息
                     * 接受到的信息类型有10种，分别使用下面10个常量标识
                     * Wechat::MSG_TYPE_TEXT       //文本消息
                     * Wechat::MSG_TYPE_IMAGE      //图片消息
                     * Wechat::MSG_TYPE_VOICE      //音频消息
                     * Wechat::MSG_TYPE_VIDEO      //视频消息
                     * Wechat::MSG_TYPE_SHORTVIDEO //视频消息
                     * Wechat::MSG_TYPE_MUSIC      //音乐消息
                     * Wechat::MSG_TYPE_NEWS       //图文消息（推送过来的应该不存在这种类型，但是可以给用户回复该类型消息）
                     * Wechat::MSG_TYPE_LOCATION   //位置消息
                     * Wechat::MSG_TYPE_LINK       //连接消息
                     * Wechat::MSG_TYPE_EVENT      //事件消息
                     *
                     * 事件消息又分为下面五种
                     * Wechat::MSG_EVENT_SUBSCRIBE    //订阅
                     * Wechat::MSG_EVENT_UNSUBSCRIBE  //取消订阅
                     * Wechat::MSG_EVENT_SCAN         //二维码扫描
                     * Wechat::MSG_EVENT_LOCATION     //报告位置
                     * Wechat::MSG_EVENT_CLICK        //菜单点击
                     */
                    /**
                     * 响应当前请求还有以下方法可以使用
                     * 具体参数格式说明请参考文档
                     *
                     * $wechat->replyText($text); //回复文本消息
                     * $wechat->replyImage($media_id); //回复图片消息
                     * $wechat->replyVoice($media_id); //回复音频消息
                     * $wechat->replyVideo($media_id, $title, $discription); //回复视频消息
                     * $wechat->replyMusic($title, $discription, $musicurl, $hqmusicurl, $thumb_media_id); //回复音乐消息
                     * $wechat->replyNews($news, $news1, $news2, $news3); //回复多条图文消息
                     * $wechat->replyNewsOnce($title, $discription, $url, $picurl); //回复单条图文消息
                     *
                     */
                    switch ($data['MsgType']) {
                        case Wechat::MSG_TYPE_EVENT:
                            //事件消息
                            switch ($data['Event']) {
                                case Wechat::MSG_EVENT_SUBSCRIBE:
                                    //关注公众号
                                    $this->replyContent(2);
                                    break;
                                case Wechat::MSG_EVENT_UNSUBSCRIBE:
                                    //取消关注，记录日志
                                    break;
                                default:
                                    //自动回复
                                    $this->replyContent(3);
                                    break;
                            }
                            break;
                        case Wechat::MSG_TYPE_TEXT:
                            //文本消息
                            $this->replyContent(1,$data['Content']);
                            break;
                        default:
                            //自动回复
                            $this->replyContent(3);
                            break;
                    }
                }
            } catch(\Exception $e){
                //写入错误日志
//                file_put_contents('./error.json', json_encode($e->getMessage()));
            }

        }
    }

    public function replyContent($msgtype,$keyword){
        switch ($msgtype){
            case 1:
                //关键词回复
                $map['msgtype']=array('not in','2,3');
                $map['keyword'] = $keyword;
                $map['status'] = 1;
                $map['method_type'] = 1;
                $info = M('WeixinReply')->where($map)->find();
                if(empty($info)){
                    $map['keyword'] = array('like','%'.$keyword.'%');
                    $map['method_type'] = 2;
                    $info = M('WeixinReply')->where($map)->find();
                }
                break;
            case 2:
            case 3:
                //关注回复
                //自动回复
                $map['msgtype']=$msgtype;
                $map['type'] = array('neq',0);
                $info = M('WeixinReply')->where($map)->find();
                break;
        }
        if(!empty($info)){
            switch ($info['type']){
                case 1:
                    //文本
                    $this->wechat->response($info['content']);
                    break;
                case 2:
                    //素材
                    $materinfo = M('WeixinMater')->where(array('id'=>$info['mater_id']))->find();
                    switch ($materinfo['type']){
                        case 1:
                            //图文
                            $where['id'] = array('in',$materinfo['news_ids']);
                            $newslist = M('WeixinNews')->where($where)->field('id,title,abstract,pic_id')->select();
                            $arr = array();
                            foreach ($newslist as $key=>$v) {
                                 $temp = array(
                                    $v['title'],
                                    $v['abstract'],
                                    $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['HTTP_HOST'].SERVER.'/weixin.php/News/index/id/'.$v['id']
                                );
                                if($v['pic_id']){
                                     $temp[] = getattachurl($v['pic_id']);
                                }
                                $arr[] = $temp;
                            }
                            $this->wechat->response($arr, Wechat::MSG_TYPE_NEWS);
                            break;
                        case 2:
                            //图片

                            break;
                        case 3:
                            //音频

                            break;
                        case 4:
                            //视频

                            break;
                        case 5:
                            //音乐

                            break;
                    }
                    break;
            }
        }
    }



    /**
     * 资源文件上传方法
     * @param  string $type 上传的资源类型
     * @return string       媒体资源ID
     */
    private function upload($type){
        $token = get_access_token();
        $auth = new WechatAuth($this->wconfig['appid'], $this->wconfig['appsecret'], $token);

        switch ($type) {
            case 'image':
                $filename = './Public/image.jpg';
                $media    = $auth->materialAddMaterial($filename, $type);
                break;

            case 'voice':
                $filename = './Public/voice.mp3';
                $media    = $auth->materialAddMaterial($filename, $type);
                break;

            case 'video':
                $filename    = './Public/video.mp4';
                $discription = array('title' => '视频标题', 'introduction' => '视频描述');
                $media       = $auth->materialAddMaterial($filename, $type, $discription);
                break;

            case 'thumb':
                $filename = './Public/music.jpg';
                $media    = $auth->materialAddMaterial($filename, $type);
                break;

            default:
                return '';
        }

        if($media["errcode"] == 42001){ //access_token expired
            $this->upload($type);
        }

        return $media['media_id'];
    }
}
